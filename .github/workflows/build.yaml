name: Linglong Builder
run-name: Build Linglong Packages
on:
  push:
    branches:
      - main
jobs:
  scan:
    runs-on: ubuntu-24.04
    outputs:
      appid-list: ${{ steps.list-appid.outputs.appid }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Check changes
        id: list-appid
        run: |
          if [ -e rebuild.list ];then
            cat rebuild.list > _build_app.list
          else
            echo > _build_app.list
          fi


          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MESSAGE" =~ \[\s*build\s+(\S+)\s*\] ]]; then
            FILE_LIST="${BASH_REMATCH[1]}"
            echo CI build cmd: ${FILE_LIST}
            if [ -e "$FILE_LIST" ];then
              cat "$FILE_LIST" >>_build_app.list
            fi
          fi

          git diff --name-only -z ${{ github.event.before }} ${{ github.sha }}|xargs -0 -I {} echo "{}"| grep '^repos/' | cut -d '/' -f 2 | sort -u|sed -E -e 's#.linyaps$##' >> _build_app.list
          echo [Selected]
          cat _build_app.list
          if [ ! -e "skip.list" ];then
            touch skip.list
          fi
          echo "appid=[$(cat _build_app.list| sort -u |grep -vxf skip.list|xargs -r -I{} echo '"{}"'| paste -sd ,)]" >> $GITHUB_OUTPUT
  build:
    needs: scan
    runs-on: ubuntu-24.04
    if: ${{needs.scan.outputs.appid-list != '[]' }}
    strategy:
      matrix:
        appid: ${{ fromJson(needs.scan.outputs.appid-list) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: linglong-builder-repo
        id: linglong-builder-repo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/repo/
          key: ${{ runner.os }}-linglong-builder-repo

      - name: linglong-builder-deepin-Runtime
        id: linglong-builder-deepin-Runtime
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/layers/main/org.deepin.Runtime
          key: ${{ runner.os }}-linglong-builder-deepin-Runtime

      - name: linglong-builder-deepin-base
        id: linglong-builder-deepin-base
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/layers/main/org.deepin.base
          key: ${{ runner.os }}-linglong-builder-deepin-base

      - name: linglong-builder-deepin-foundation
        id: linglong-builder-deepin-foundation
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/layers/main/org.deepin.foundation
          key: ${{ runner.os }}-linglong-builder-deepin-foundation

      - name: linglong-builder-uniontech-foundation
        id: linglong-builder-uniontech-foundation
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/layers/main/com.uniontech.foundation
          key: ${{ runner.os }}-linglong-builder-uniontech-foundation

      - name: linglong-helper-cache
        id: linglong-helper-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-helper
          key: ${{ runner.os }}-linglong-helper-cache

      - name: install
        run: |
          sudo apt install -y apt-transport-https ca-certificates curl gpg xdg-utils
          sudo mkdir -p /etc/apt/keyrings/
          curl -fsSL https://download.opensuse.org/repositories/home:/kamiyadm/xUbuntu_24.04/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/linglong-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/linglong-apt-keyring.gpg] https://download.opensuse.org/repositories/home:/kamiyadm/xUbuntu_24.04/ ./" | sudo tee /etc/apt/sources.list.d/linglong.list
          sudo apt update
          sudo apt install linglong-builder linglong-box linglong-bin
          ll-cli --version

      - name: Build ${{matrix.appid}}
        id: build
        run: |
          echo APPID=${{matrix.appid}}
          export REPO_ROOT=$(pwd)/repos
          export APP_ID=${{matrix.appid}}
          export NEW_APP_ID="${APP_ID}.linyaps"
          export APP_NAME=$(grep ${{matrix.appid}} list.csv | cut -d, -f2)
          export APP_DIR=${REPO_ROOT}/${NEW_APP_ID}
          export CACHE_DIR=~/.cache/linglong-helper

          yarn install
          bash ./build.sh

          git add .
          COMMIT=$(git diff --cached --quiet&&echo no||echo yes)
          LAYER_NAME=$(find ${APP_DIR} -name "*_binary.layer")
          REF_ID=$(git rev-parse --short HEAD)
          SHA1_NAME="${LAYER_NAME}.sha1"

          pushd ${APP_DIR} >/dev/null
          sha1sum `basename "${LAYER_NAME}"` > "${SHA1_NAME}"
          popd >/dev/null

          echo COMMIT=${COMMIT}
          echo "appid=${NEW_APP_ID}" >> $GITHUB_OUTPUT
          echo "appdir=${APP_DIR}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "layer_name=${LAYER_NAME}" >> $GITHUB_OUTPUT
          echo "sha1_name=${SHA1_NAME}" >> $GITHUB_OUTPUT
          echo "tag_name=$(date '+%Y%m%d')" >> $GITHUB_OUTPUT
          echo "ref_id=${REF_ID}" >> $GITHUB_OUTPUT

      - name: Commit
        if: ${{steps.build.outputs.commit == 'yes' }}
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "Build ${{matrix.appid}}"
          git status -s
          git pull --rebase origin main
          git push origin main

          REF_ID=$(git rev-parse --short HEAD)
          echo "ref_id=${REF_ID}" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{steps.build.outputs.tag_name}}
          body: Add layer ${{matrix.appid}} [${{steps.commit.outputs.ref_id || steps.build.outputs.ref_id || github.sha}}]("https://github.com/${{github.repository}}/tree/${{steps.commit.outputs.ref_id || steps.build.outputs.ref_id || github.sha}}/repos/${{matrix.appid}}.linyaps")
          append_body: true
          files: |
            ${{steps.build.outputs.layer_name}}
            ${{steps.build.outputs.sha1_name}}
