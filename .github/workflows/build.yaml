name: Linglong Builder
run-name: Build Linglong Packages
on:
  push:
    tags:
      - "*"
jobs:
  scan:
    runs-on: ubuntu-24.04
    outputs:
      appid-list: ${{ steps.list-appid.outputs.appid }}
      tag: ${{ steps.list-appid.outputs.tag }}
      npm-cache-id: ${{ steps.cache-key.outputs.npm }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Generate Cache Key
        id: cache-key
        run: |
          hash=$(cat yarn.lock | sha256sum | cut -d' ' -f1)
          key=${{ runner.os }}-npm-${hash}
          echo "npm=$key" >> $GITHUB_OUTPUT
      - name: Pull Builder Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/
          key: linglong-builder-cache
      - name: Pull NPM Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{steps.cache-key.outputs.npm}}
      - name: Check changes
        id: list-appid
        run: |
          APPID_LIST=/tmp/appid.list
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "Current Tag: $CURRENT_TAG"
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -A 1 "$CURRENT_TAG" | tail -n 1)

          echo >${APPID_LIST}
          git diff --name-only --format="" ${PREVIOUS_TAG}..${CURRENT_TAG} | grep '^repos/' | cut -d '/' -f 2 | sort -u | grep -Ff "filter.list" |sed -E -e 's#.linyaps$##'| tee -a ${APPID_LIST}
          echo "tag=${GITHUB_REF#refs/tags/}">> $GITHUB_OUTPUT
          echo "appid=[$(cat ${APPID_LIST}| sort -u |xargs -r -I{} echo '"{}"'| paste -sd ,)]" >> $GITHUB_OUTPUT
      - name: Install
        run: |
          sudo apt install -y apt-transport-https ca-certificates curl gpg xdg-utils
          sudo mkdir -p /etc/apt/keyrings/
          curl -fsSL https://download.opensuse.org/repositories/home:/kamiyadm/xUbuntu_24.04/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/linglong-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/linglong-apt-keyring.gpg] https://download.opensuse.org/repositories/home:/kamiyadm/xUbuntu_24.04/ ./" | sudo tee /etc/apt/sources.list.d/linglong.list
          sudo apt update
          sudo apt install linglong-builder linglong-box linglong-bin
          ll-cli --version
      - name: Build Cache
        run: |
          export REPO_ROOT=$(pwd)/repos
          export CACHE_DIR=~/.cache/linglong-helper
          yarn install
          bash ./build_cache.sh
  run:
    needs: scan
    runs-on: ubuntu-24.04
    if: ${{needs.scan.outputs.appid-list != '[]' }}
    strategy:
      matrix:
        appid: ${{ fromJson(needs.scan.outputs.appid-list) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull Builder Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/
          key: linglong-builder-cache

      - name: Pull NPM Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{needs.scan.outputs.npm-cache-id}}
      - name: Install
        run: |
          sudo apt install -y apt-transport-https ca-certificates curl gpg xdg-utils
          sudo mkdir -p /etc/apt/keyrings/
          curl -fsSL https://download.opensuse.org/repositories/home:/kamiyadm/xUbuntu_24.04/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/linglong-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/linglong-apt-keyring.gpg] https://download.opensuse.org/repositories/home:/kamiyadm/xUbuntu_24.04/ ./" | sudo tee /etc/apt/sources.list.d/linglong.list
          sudo apt update
          sudo apt install linglong-builder linglong-box linglong-bin
          ll-cli --version

      - name: Build ${{matrix.appid}}
        id: build
        run: |
          export APP_ID=$(echo "${{matrix.appid}}"|cut -d: -f2)
          export REPO_ROOT=$(pwd)/repos
          export NEW_APP_ID="${APP_ID}.linyaps"
          export APP_NAME=$(grep ${APP_ID} list.csv | cut -d, -f2)
          export APP_DIR=${REPO_ROOT}/${NEW_APP_ID}
          export CACHE_DIR=~/.cache/linglong-helper

          echo APPID=${APP_ID}

          yarn install
          # bash ./build_cache.sh
          bash ./build.sh "${APP_ID}"

          git add .
          COMMIT=$(git diff --cached --quiet&&echo no||echo yes)
          LAYER_NAME=$(find ${APP_DIR} -name "*_binary.layer")

          REF_ID=$(git log -1 --format="%h" -- "${APP_DIR}")
          SHA1_NAME="${LAYER_NAME}.sha1"

          pushd ${APP_DIR} >/dev/null
          sha1sum `basename "${LAYER_NAME}"` > "${SHA1_NAME}"
          popd >/dev/null

          echo COMMIT=${COMMIT}
          echo "rawid=${APP_ID}" >> $GITHUB_OUTPUT
          echo "appid=${NEW_APP_ID}" >> $GITHUB_OUTPUT
          echo "appdir=${APP_DIR}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "layer_name=${LAYER_NAME}" >> $GITHUB_OUTPUT
          echo "sha1_name=${SHA1_NAME}" >> $GITHUB_OUTPUT
          echo "ref_id=${REF_ID}" >> $GITHUB_OUTPUT

      - name: Commit
        if: ${{ steps.build.outputs.commit == 'yes' }}
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "Update ${{ steps.build.outputs.appid }}"
          git status -s
          git pull --rebase origin main
          git push origin main

          REF_ID=$(git rev-parse --short HEAD)
          echo "ref_id=${REF_ID}" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{steps.build.outputs.cmd == 'build' }}
        with:
          tag_name: ${{needs.scan.outputs.tag}}
          body: Add ${{steps.build.outputs.appid}} [${{steps.commit.outputs.ref_id || steps.build.outputs.ref_id || github.sha}}]("https://github.com/${{github.repository}}/tree/${{steps.commit.outputs.ref_id || steps.build.outputs.ref_id || github.sha}}/repos/${{steps.build.outputs.appid}}")
          append_body: true
          files: |
            ${{steps.build.outputs.layer_name}}
            ${{steps.build.outputs.sha1_name}}
